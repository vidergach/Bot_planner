package org.example;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ MessageHandler.
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
 *
 * @see MessageHandler
 */
public class MessageHandlerTests {
    private MessageHandler messageHandler;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º.
     */
    @BeforeEach
    void setUp() {
        messageHandler = new MessageHandler();
    }

    /**
     * –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.
     */
    @Test
    void testAddTask() {
        String result = messageHandler.processUserInput("/add –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");
        assertEquals("–ó–∞–¥–∞—á–∞ \"–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã\" –¥–æ–±–∞–≤–ª–µ–Ω–∞!", result);
    }

    /**
     * –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏.
     */
    @Test
    void testAddExistingTask() {
        messageHandler.processUserInput("/add –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");
        String result = messageHandler.processUserInput("/add –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");
        assertEquals("–ó–∞–¥–∞—á–∞ \"–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã\" —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!", result);
    }

    /**
     * –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.
     */
    @Test
    void testShowEmptyTasks() {
        String result = messageHandler.processUserInput("/tasks", "user123");
        assertEquals("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!", result);
    }

    /**
     * –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.
     */
    @Test
    void testShowTasks() {
        messageHandler.processUserInput("/add –ó–∞–¥–∞—á–∞ 1", "user123");
        messageHandler.processUserInput("/add –ó–∞–¥–∞—á–∞ 2", "user123");

        String result = messageHandler.processUserInput("/tasks", "user123");
        assertTrue(result.contains("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á"));
        assertTrue(result.contains("–ó–∞–¥–∞—á–∞ 1"));
        assertTrue(result.contains("–ó–∞–¥–∞—á–∞ 2"));
    }

    /**
     * –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
     */
    @Test
    void testDeleteTask() {
        messageHandler.processUserInput("/add –£–¥–∞–ª—è–µ–º–∞—è –∑–∞–¥–∞—á–∞", "user123");
        String result = messageHandler.processUserInput("/delete –£–¥–∞–ª—è–µ–º–∞—è –∑–∞–¥–∞—á–∞", "user123");
        assertTrue(result.contains("üóëÔ∏è –ó–∞–¥–∞—á–∞ \"–£–¥–∞–ª—è–µ–º–∞—è –∑–∞–¥–∞—á–∞\" —É–¥–∞–ª–µ–Ω–∞"));
    }

    /**
     * –¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.
     */
    @Test
    void testMarkTaskDone() {
        messageHandler.processUserInput("/add –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");
        String result = messageHandler.processUserInput("/done –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");
        assertEquals("–ó–∞–¥–∞—á–∞ \"–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã\" –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π!", result);
    }

    /**
     * –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
     */
    @Test
    void testShowEmptyCompletedTasks() {
        String result = messageHandler.processUserInput("/dTask", "user123");
        assertEquals("–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø—É—Å—Ç!", result);
    }

    /**
     * –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
     */
    @Test
    void testShowCompletedTasks() {
        messageHandler.processUserInput("/add –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");
        messageHandler.processUserInput("/done –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");

        String result = messageHandler.processUserInput("/dTask", "user123");
        assertTrue(result.contains("‚úÖ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"));
        assertTrue(result.contains("–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã"));
    }
}